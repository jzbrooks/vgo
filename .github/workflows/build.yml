name: build

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: zulu

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Export Properties
      id: properties
      shell: bash
      run: |
        cat changelog.md
        PROPERTIES="$(./gradlew properties --console=plain -q)"
        VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
        CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: build
      run: ./gradlew build

    - name: archive vgo test results
      uses: actions/upload-artifact@v4
      with:
        name: vgo_test_results
        path: vgo/build/reports/tests/test/

    - name: archive vgo core test results
      uses: actions/upload-artifact@v4
      with:
        name: vgo_core_test_results
        path: vgo-core/build/reports/tests/test/

    - name: release binary
      run: ./gradlew binary

    - name: archive vgo
      uses: actions/upload-artifact@v4
      with:
        name: vgo
        path: vgo/build/libs/vgo

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
